# Copyright 2025 the original author or authors.
# <p>
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# <p>
# https://www.apache.org/licenses/LICENSE-2.0
# <p>
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.jackson.CodehausToFasterXML
examples:
- description: '`CodehausToFasterXMLTest#onlyJsonSerializeInclusion`'
  sources:
  - before: |
      import org.codehaus.jackson.map.ObjectMapper;
      import org.codehaus.jackson.map.annotate.JsonSerialize;

      class Test {
          private static ObjectMapper initializeObjectMapper() {
              ObjectMapper mapper = new ObjectMapper();
              return mapper.setSerializationInclusion(JsonSerialize.Inclusion.NON_NULL);
          }
      }
    after: |
      import com.fasterxml.jackson.annotation.JsonInclude.Include;
      import com.fasterxml.jackson.databind.ObjectMapper;

      class Test {
          private static ObjectMapper initializeObjectMapper() {
              ObjectMapper mapper = new ObjectMapper();
              return mapper.setSerializationInclusion(Include.NON_NULL);
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.jackson.RemoveBuiltInModuleRegistrations
examples:
- description: '`RemoveBuiltInModuleRegistrationsTest#removeJavaTimeModuleRegistration`'
  sources:
  - before: |
      import com.fasterxml.jackson.databind.ObjectMapper;
      import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;

      class Test {
          void configure() {
              ObjectMapper mapper = new ObjectMapper();
              mapper.registerModule(new JavaTimeModule());
          }
      }
    after: |
      import com.fasterxml.jackson.databind.ObjectMapper;

      class Test {
          void configure() {
              ObjectMapper mapper = new ObjectMapper();
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.jackson.RemoveRedundantJsonPropertyValue
examples:
- description: '`RemoveRedundantJsonPropertyValueTest#removeRedundantJsonPropertyFromClass`'
  sources:
  - before: |
      import com.fasterxml.jackson.annotation.JsonProperty;

      class CategorieRequest {
          @JsonProperty(value = "name", required = true)
          private String name;
          @JsonProperty("color")
          private String color;
          @JsonProperty("parent_id")
          private Long parentId;
      }
    after: |
      import com.fasterxml.jackson.annotation.JsonProperty;

      class CategorieRequest {
          @JsonProperty(required = true)
          private String name;
          private String color;
          @JsonProperty("parent_id")
          private Long parentId;
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.jackson.UpgradeJackson_2_3
examples:
- description: '`Jackson3DependenciesTest#jacksonAnnotations`'
  sources:
  - before: |
      <project>
          <modelVersion>4.0.0</modelVersion>
          <groupId>org.example</groupId>
          <artifactId>example</artifactId>
          <version>1.0.0</version>
          <dependencies>
              <dependency>
                  <groupId>com.fasterxml.jackson.core</groupId>
                  <artifactId>jackson-annotations</artifactId>
                  <version>2.19.0</version>
              </dependency>
          </dependencies>
      </project>
    after: |
      <project>
          <modelVersion>4.0.0</modelVersion>
          <groupId>org.example</groupId>
          <artifactId>example</artifactId>
          <version>1.0.0</version>
          <dependencies>
              <dependency>
                  <groupId>com.fasterxml.jackson.core</groupId>
                  <artifactId>jackson-annotations</artifactId>
                  <version>2.20</version>
              </dependency>
          </dependencies>
      </project>
    path: pom.xml
    language: xml
- description: '`Jackson3MethodRenamesTest#jsonGeneratorWriteObject`'
  sources:
  - before: |
      import com.fasterxml.jackson.core.JsonGenerator;

      class Test {
          void test(JsonGenerator gen, Object value) throws Exception {
              gen.writeObject(value);
          }
      }
    after: |
      import tools.jackson.core.JsonGenerator;

      class Test {
          void test(JsonGenerator gen, Object value) throws Exception {
              gen.writePOJO(value);
          }
      }
    language: java
- description: '`Jackson3TypeChangesTest#jsonFactory`'
  sources:
  - before: |
      import com.fasterxml.jackson.core.JsonFactory;

      class Test {
          JsonFactory factory = new JsonFactory();
      }
    after: |
      import tools.jackson.core.TokenStreamFactory;

      class Test {
          TokenStreamFactory factory = new TokenStreamFactory();
      }
    language: java
- description: '`UpgradeJackson_2_3Test#jacksonUpgradeToVersion3`'
  sources:
  - before: |
      import com.fasterxml.jackson.annotation.JsonProperty;
      import com.fasterxml.jackson.core.JsonFactory;
      import com.fasterxml.jackson.core.JsonFactoryBuilder;
      import com.fasterxml.jackson.databind.ObjectMapper;

      class Test {
          public String foo(@JsonProperty("foo") String foo) {
              return foo;
          }

          static void helloJackson() {
              Object[] input = new Object[] { "one", "two" };
              JsonFactory factory = new JsonFactoryBuilder().build();
          }
      }
    after: |
      import com.fasterxml.jackson.annotation.JsonProperty;
      import tools.jackson.core.JsonFactoryBuilder;
      import tools.jackson.databind.ObjectMapper;
      import tools.jackson.core.TokenStreamFactory;

      class Test {
          public String foo(@JsonProperty("foo") String foo) {
              return foo;
          }

          static void helloJackson() {
              Object[] input = new Object[] { "one", "two" };
              TokenStreamFactory factory = new JsonFactoryBuilder().build();
          }
      }
    language: java
  - before: |
      <project>
          <modelVersion>4.0.0</modelVersion>
          <groupId>org.example</groupId>
          <artifactId>example</artifactId>
          <version>1.0.0</version>
          <dependencies>
              <dependency>
                  <groupId>com.fasterxml.jackson.core</groupId>
                  <artifactId>jackson-annotations</artifactId>
                  <version>2.19.0</version>
              </dependency>
              <dependency>
                  <groupId>com.fasterxml.jackson.core</groupId>
                  <artifactId>jackson-core</artifactId>
                  <version>2.19.0</version>
              </dependency>
              <dependency>
                  <groupId>com.fasterxml.jackson.core</groupId>
                  <artifactId>jackson-databind</artifactId>
                  <version>2.19.0</version>
              </dependency>
              <dependency>
                  <groupId>com.fasterxml.jackson.module</groupId>
                  <artifactId>jackson-module-parameter-names</artifactId>
                  <version>2.19.0</version>
              </dependency>
              <dependency>
                  <groupId>com.fasterxml.jackson.datatype</groupId>
                  <artifactId>jackson-datatype-jdk8</artifactId>
                  <version>2.19.0</version>
              </dependency>
              <dependency>
                  <groupId>com.fasterxml.jackson.datatype</groupId>
                  <artifactId>jackson-datatype-jsr310</artifactId>
                  <version>2.19.0</version>
              </dependency>
          </dependencies>
      </project>
    path: pom.xml
    language: xml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.jackson.UpgradeJackson_2_3_RemoveRedundantFeatureFlags
examples:
- description: '`RemoveRedundantFeatureFlagsTest#removeEnableSortPropertiesAlphabetically`'
  sources:
  - before: |
      import com.fasterxml.jackson.databind.MapperFeature;
      import com.fasterxml.jackson.databind.ObjectMapper;

      class Test {
          void configure() {
              ObjectMapper mapper = new ObjectMapper();
              mapper.enable(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY);
          }
      }
    after: |
      import com.fasterxml.jackson.databind.MapperFeature;
      import com.fasterxml.jackson.databind.ObjectMapper;

      class Test {
          void configure() {
              ObjectMapper mapper = new ObjectMapper();
          }
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.jackson.UseModernDateTimeSerialization
examples:
- description: '`UseModernDateTimeSerializationTest#removeIso8601FormatOnLocalDateTime`'
  sources:
  - before: |
      import com.fasterxml.jackson.annotation.JsonFormat;
      import java.time.LocalDateTime;

      class Event {
          @JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ss")
          private LocalDateTime timestamp;
      }
    after: |
      import java.time.LocalDateTime;

      class Event {
          private LocalDateTime timestamp;
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.jackson.codehaus.CodehausDependencyToFasterXML
examples:
- description: '`CodehausDependencyToFasterXMLTest#changeDependencyWithoutExplicitVersion`'
  parameters:
  - 'null'
  sources:
  - before: |
      <project>
          <modelVersion>4.0.0</modelVersion>
          <groupId>com.mycompany.app</groupId>
          <artifactId>my-app</artifactId>
          <version>1</version>
          <dependencies>
              <dependency>
                  <groupId>org.codehaus.jackson</groupId>
                  <artifactId>jackson-core-asl</artifactId>
                  <version>1.9.13</version>
              </dependency>
              <dependency>
                  <groupId>org.codehaus.jackson</groupId>
                  <artifactId>jackson-mapper-asl</artifactId>
                  <version>1.9.13</version>
              </dependency>
          </dependencies>
      </project>
    path: pom.xml
    language: xml
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.jackson.codehaus.JsonIncludeAnnotation
examples:
- description: '`JsonIncludeAnnotationTest#retainOriginalAnnotation`'
  sources:
  - before: |
      import org.codehaus.jackson.map.annotate.JsonSerialize;
      import org.codehaus.jackson.map.JsonSerializer.None;
      import static org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion.NON_NULL;

      @JsonSerialize(include = NON_NULL, using = None.class)
      class Test {
      }
    after: |
      import org.codehaus.jackson.map.annotate.JsonSerialize;
      import com.fasterxml.jackson.annotation.JsonInclude;
      import org.codehaus.jackson.map.JsonSerializer.None;

      @JsonInclude(value = JsonInclude.Include.NON_NULL)
      @JsonSerialize(using = None.class)
      class Test {
      }
    language: java
---
type: specs.openrewrite.org/v1beta/example
recipeName: org.openrewrite.java.jackson.codehaus.RemoveDoublyAnnotatedCodehausAnnotations
examples:
- description: '`RemoveDoublyAnnotatedCodehausAnnotationsTest#removeCodehausAnnotationsIfDoublyAnnotated`'
  sources:
  - before: |
      import org.codehaus.jackson.map.annotate.JsonSerialize;
      import org.codehaus.jackson.map.JsonSerializer.None;
      import static org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion.NON_NULL;

      @JsonSerialize(include = NON_NULL, using = None.class)
      @com.fasterxml.jackson.databind.annotation.JsonSerialize(using = com.fasterxml.jackson.databind.JsonSerializer.None.class)
      class Test {
      }
    after: |
      import com.fasterxml.jackson.databind.JsonSerializer;
      import com.fasterxml.jackson.databind.annotation.JsonSerialize;

      @JsonSerialize(using = JsonSerializer.None.class)
      class Test {
      }
    language: java
